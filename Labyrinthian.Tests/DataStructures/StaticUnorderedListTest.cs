using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace Labyrinthian.Tests.DataStructures
{
    // Some of these tests were generated by ChatGPT
    internal class StaticUnorderedListTest
    {
        [Test]
        public void Pop()
        {
            StaticUnorderedList<int> list = new(6) { 1, 2, 3, 4, 5, 6 };

            int item = list.Pop(3);
            Assert.Multiple(() =>
            {
                Assert.That(item, Is.EqualTo(4));
                Assert.That(list, Has.Count.EqualTo(5));
            });
        }

        [Test]
        public void CreateFromEnumerable()
        {
            List<int> list = new(6) { 0, 1, 2, 3, 4, 5 };
#pragma warning disable IDE0028 // Simplify collection initialization
            StaticUnorderedList<int> dCList = new(list, 7);
            dCList.Add(6);
#pragma warning restore IDE0028 // Simplify collection initialization

            for (int i = 0; i < dCList.Count; i++)
            {
                Assert.That(dCList[i], Is.EqualTo(i));
            }
        }

        [Test]
        public void Add()
        {
            StaticUnorderedList<int> list = new(10) { 0, 1, 2, 3, 4, 5 };
            for (int i = 0; i < list.Count; i++)
            {
                Assert.That(list[i], Is.EqualTo(i));
            }
            Assert.That(list.Capacity, Is.EqualTo(10));
        }

        [Test]
        public void Add_ThrowsExceptionWhenCapacityExceeded()
        {
            var list = new StaticUnorderedList<int>(1) { 1 };

            Assert.Throws<IndexOutOfRangeException>(() => list.Add(2));
        }

        [Test]
        public void Remove_ItemDecreasesCount()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            bool removed = list.Remove(1);
            Assert.Multiple(() =>
            {
                Assert.That(removed, Is.True);
                Assert.That(list, Has.Count.EqualTo(1));
            });
        }

        [Test]
        public void Remove_ReturnsFalseWhenItemNotFound()
        {
            var list = new StaticUnorderedList<int>(10) { 1 };

            bool removed = list.Remove(2);

            Assert.That(removed, Is.False);
        }

        [Test]
        public void Insert_ItemIsInsertedAtSpecifiedIndex()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            list.Insert(1, 3);

            Assert.That(list[1], Is.EqualTo(3));
        }

        [Test]
        public void Insert_IncreasesCount()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            list.Insert(1, 3);

            Assert.That(list, Has.Count.EqualTo(3));
        }

        [Test]
        public void Insert_ThrowsExceptionWhenCapacityExceeded()
        {
            var list = new StaticUnorderedList<int>(2) { 1, 2 };

            Assert.Throws<IndexOutOfRangeException>(() => list.Insert(1, 3));
        }

        [Test]
        public void RemoveAt_ItemIsRemovedAtSpecifiedIndex()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2, 3 };

            list.RemoveAt(1);

            Assert.That(list[1], Is.EqualTo(3));
        }

        [Test]
        public void RemoveAt_DecreasesCount()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2, 3 };

            list.RemoveAt(1);

            Assert.That(list, Has.Count.EqualTo(2));
        }

        [Test]
        public void Clear_ResetsCountToZero()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            list.Clear();

            Assert.That(list, Is.Empty);
        }

        [Test]
        public void Contains_ReturnsTrueWhenItemExists()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            Assert.That(list, Does.Contain(2));
        }

        [Test]
        public void Contains_ReturnsFalseWhenItemDoesNotExist()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2 };

            bool contains = list.Contains(3);

            Assert.That(contains, Is.False);
        }

        [Test]
        public void IndexOf_ReturnsCorrectIndexWhenItemExists()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2, 3 };

            int index = list.IndexOf(2);

            Assert.That(index, Is.EqualTo(1));
        }

        [Test]
        public void IndexOf_ReturnsNegativeOneWhenItemDoesNotExist()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2, 3 };

            int index = list.IndexOf(4);

            Assert.That(index, Is.EqualTo(-1));
        }

        [Test]
        public void CopyTo_CopiesListItemsToArray()
        {
            var list = new StaticUnorderedList<int>(10) { 1, 2, 3 };

            var array = new int[3];

            list.CopyTo(array, 0);

            CollectionAssert.AreEqual(new int[] { 1, 2, 3 }, array);
        }
    }
}